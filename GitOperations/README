Exercise Git: Version Control
=======

First, make a Github account. I recommend using your twitter username if available. Next, go through these online resources.

Run through this tutorial

http://try.github.com

http://pcottle.github.com/learnGitBranching/

After you've run through those tutorials, head over to the folder you used when completing Exercise01. If your code isn't in a folder called Exercise01 (or similar) already, do a `mkdir Exercise01`, move your files there with `mv` and then `cd` into that folder. Next, run the following commands. 

`git init`

This creates a new `git` _repository_, which is like a database that saves every change you make to a line in a file. It remembers what line and what characters you change, with what changes you make, so that if two people work on the same file it can easily merge the two files together. You don't have to run this command more than once in a folder, because the folder is now a repository. It's like the folder gains new commands, in addition to `ls`, `cd`, `pushd` and `popd` you can now run a multitude of commands beginning with the word `git`.

`git init` should only happen on a "project", not on all your folders. Never try to make a `git` repository in a folder above one that already has a `git` repo. Here's an example -
~/src/exercises/exercise01 - if this folder has a repository in it (type `git status` to see)
~/src/exercises - this folder should NOT have `git init` run in it, because your computer can become very confused.

A `git` repository is like a folder, it has individual settings and properties, all of which you can change. Each repository is different, and can have different settings. Let's try setting some now. 
`git config user.name "Your Name Here"`
`git config user.email "your_email@example.com"` -- Use the email you've associated with your github accont.

If you leave this repository, these settings don't follow you up the directory tree. If you for instance create an Exercise02 folder, and do `git init` to create a repository there, you'll need to setup these settings again. Because the computer will change every day, this is something you'll need to get used to doing. On your laptop however, you can follow github's 'set up git' tutorial to make these settings global. The settings in your Exercise01 folder will still be there when you get back to that folder, however.

Next, `git` doesn't know what files you want it to track, so we're going to have to tell it. 
`touch readme.md` will create a file in this directory, but it will be blank. You'll need to put something in it with the `subl` command - so type `subl readme.md` and add some text. This will be visible to the world soon, so put something you're OK with people seeing. "First programming exercise at Hackbright!" is a good candidate.
Now on to adding files. 
`git add readme.md` will add the readme file you just made to `git`'s database. `git` now knows about the file, but you haven't told `git` to save the most recent copy. Let's do that now with `git commit -m'Initial Commit'`.

We need to break down that command, so let's look at the pieces.
`git` is the program we're using to keep track of versions of files.
`commit` saves a version of everything you've added to the commit as it is right now.
`-m''` is a flag that means "message". It takes an argument, which is what those '' are for. Inside the '' ("" is also fine) you put a message describing what you did to the file, or files. Something like "added sort function" or "fixing typos on homepage", which summarizes the task you were trying to accomplish. This helps when you need to go back and figure out what you did, or when you need to find an example of a time when you wrote something. It's essentially notes to yourself, or to your team.

Let's look at what you've just done - type `git status` to see 

This brings us to the next part, where you might have to actually share code - either with people, or just between computers. What we're going to do is create a "remote". The nice thing about keeping our changes line-by-line and character-by-character is that we can just send all of those changes to another computer, apply them in order, and reconstruct the whole file. Then, if you make a change, all you have to do is send the change. The way we send these changes is by establishing a remote. 

When we add a remote, much like when we do any other configuration, it only exists for that repository. Outside of the folder our repository is in, none of these settings exist. 



Further Reading
========

Here's a very through overview of Git and how it works.
http://ftp.newartisans.com/pub/git.from.bottom.up.pdf

Even more through, is this book:
http://git-scm.com/book/en
